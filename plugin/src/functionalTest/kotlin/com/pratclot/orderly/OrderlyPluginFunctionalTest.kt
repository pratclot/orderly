/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.pratclot.orderly

import com.pratclot.orderly.tools.ResourceLoader
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.MethodSource
import java.io.File
import kotlin.test.Ignore
import kotlin.test.Test
import kotlin.test.assertContains
import kotlin.test.assertEquals
import kotlin.test.assertTrue

const val STACKTRACE = "--stacktrace"
const val DRY_RUN = "--dry-run"

fun GradleRunner.withStacktrace() = withArguments(*arguments.toTypedArray(), STACKTRACE)
fun GradleRunner.withDryRun() = withArguments(*arguments.toTypedArray(), DRY_RUN)

/**
 * A simple functional test for the 'com.pratclot.orderly' plugin.
 */
class OrderlyPluginFunctionalTest : BaseFunctionalTest() {

    @BeforeEach
    fun setup() {
        before()
    }

    @Test
    fun `plugin creates api common dir if it does not exist`() {
        // Run the build
        runner.withArguments(TASK_CREATE_SUBPROJECT_API_COMMON)
        runner.build()
        assertContains(File(getProjectDir(), "api").list(), "common")
    }

    @Test
    fun `plugin creates build gradle for api common`() {
        runner.withArguments(TASK_CREATE_SUBPROJECT_API_COMMON)
        runner.build()
        assertContains(getProjectDir().resolve("api").resolve("common").list(), BUILD_FILE_NAME)
    }

    @Test
    fun `plugin creates build gradle for api common with java-library plugin`() {
        runner.withArguments(TASK_CREATE_SUBPROJECT_API_COMMON)
        runner.build()
        val lines =
            getProjectDir().resolve("api").resolve("common").resolve(BUILD_FILE_NAME).readLines()
        assertTrue(lines.any { it.contains("id(\"java-library\")") })
    }

    @Test
    fun `plugin links api common with root project`() {
        runner.withArguments(
            TASK_CREATE_SUBPROJECT_COMMON_KOTLIN,
            TASK_CREATE_SUBPROJECT_DTO,
            TASK_CREATE_SUBPROJECT_API_COMMON
        )
        runner.build()
        runner.withArguments(":api:common:tasks")
        runner.build()
    }

    /**
     * Good one to check if all projects are properly linked.
     *
     * On the other hand, not sure what it does.
     */
    @Ignore
    @ParameterizedTest
    @MethodSource("params2")
    fun `plugin links all subprojects`(taskName: String, expectedProjectPath: String) {
        runner.withArguments(taskName)
        runner.withDebug(true)
        runner.build()
        runner.withArguments("$expectedProjectPath:tasks")
        runner.build()
    }

    companion object {

        @JvmStatic
        fun params2() = CreateSubprojectTasks.values()
            .sortedByDescending { it.taskName }
            .map {
                Arguments.of(it.taskName, it.defaultPath)
            }
    }

    @Test
    fun `plugin creates source dirs for api common`() {
        runner.withArguments(TASK_CREATE_SUBPROJECT_API_COMMON)
        runner.withDebug(true)
        runner.build()
        assertContains(getProjectDir().resolve("api/common/src/main/kotlin/com").list(), "demo")
        assertContains(getProjectDir().resolve("api/common/src/test/kotlin/com").list(), "demo")
    }

    @Test
    fun `plugin creates manifest file for common android`() {
        runner.withArguments(TASK_CREATE_SUBPROJECT_COMMON_ANDROID)
        runner.withDebug(true)
        runner.build()
        assertContains(
            getProjectDir().resolve("common/android/src/main").list(),
            "AndroidManifest.xml"
        )
    }

    @Test
    fun `plugin creates source dirs for api common with custom dir names`() {
        getBuildFile().appendText(
            """
            $EXTENSION_NAME {
                packageName.set("com.prod")
                dirNameApi.set("superApi")
                dirNameApiCommon.set("uncommon")
            }
        """.trimIndent()
        )

        runner.withArguments(TASK_CREATE_SUBPROJECT_API_COMMON)
        runner.withDebug(true)
        runner.build()
        assertContains(
            getProjectDir().resolve("superApi/uncommon/src/main/kotlin/com").list(),
            "prod"
        )
        assertContains(
            getProjectDir().resolve("superApi/uncommon/src/test/kotlin/com").list(),
            "prod"
        )
    }

    /**
     * TODO: Hard to maintain expected projects!
     */
    @Test
    fun `plugin creates all subprojects`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments("projects")
        runner.build()
            .output.let { output ->
                listOf(
                    "Project ':api:common'",
                    "Project ':api:feature1:live'",
                    "Project ':api:feature1:mock'",
                    "Project ':common:android'",
                    "Project ':common:kotlin'",
                    "Project ':screen:feature1'",
                    "Project ':usecase:feature1'",
                    "Project ':repository:feature1'",
                ).forEach {
                    assertContains(output, it)
                }
            }
    }

    @Test
    fun `plugin applies common plugins`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        getBuildFile().appendText(
            """
            $EXTENSION_NAME {
                commonPlugins.set(commonPlugins.get() + "org.jlleitschuh.gradle.ktlint")
            }
        """.trimIndent()
        )
        runner.withArguments("ktlintCheck", "--dry-run")
        runner.build()
    }

    @Test
    fun `plugin links project dependencies for api layers`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(":api:feature1:mock:dependencies", "--configuration=implementation")
        runner.build()
            .output.let {
                assertContains(it, "project dto")
                assertContains(it, "project common")
            }
    }

    @Test
    fun `plugin links externally passed dependencies for api common live layer`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        getBuildFile().appendText(
            """
            $EXTENSION_NAME {
                dependenciesApiCommonLiveStrings.set(listOf("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.7.0"))
            }
        """.trimIndent()
        )
        runner.withArguments(":api:common-live:dependencies", "--configuration=api")
        runner.build()
            .output.let {
                assertContains(
                    it,
                    "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.7.0"
                )
            }
    }

    @Test
    fun `plugin links external dependencies for api common live layer with user overrides`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(":api:common-live:dependencies", "--configuration=api")
        runner.build()
            .output.let {
                assertContains(it, "com.squareup.retrofit2:retrofit")
                assertContains(it, "com.squareup.okhttp3:logging-interceptor")
            }
    }

    @Test
    fun `plugin links api common live to all api live projects`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(":api:feature1:live:assemble")
        runner.build()
            .output.let {
                assertContains(it, ":api:common-live:compile")
            }
    }

    @Test
    fun `plugin links dto to api common`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(":api:common:assemble")
        runner.build()
            .output.let {
                assertContains(it, ":dto:compile")
            }
    }

    @Test
    fun `plugin links common deps to repository layers`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(":repository:feature1:assemble")
        runner.build()
            .output.let {
                assertContains(it, ":domain:compile")
                assertContains(it, ":dto:compile")
                assertContains(it, ":api:common:compile")
            }
    }

    @Test
    fun `plugin links api deps to repository layer`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(
            ":repository:feature1:assemble",
        )
        runner.build()
            .output.let {
                assertContains(it, ":api:feature1:mock:compile")
                assertContains(it, ":api:feature1:live:compile")
            }
    }

    @Test
    fun `plugin links domain deps to usecase layers`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(
            ":usecase:feature1:assemble",
        )
        runner.build()
            .output.let {
                assertContains(it, ":domain:compile")
            }
    }

    @Test
    fun `plugin links repository deps to usecase layers`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(
            ":usecase:feature1:assemble",
        )
        runner.build()
            .output.let {
                assertContains(it, ":repository:feature1:compile")
            }
    }

    @Test
    fun `plugin links common kotlin to all subprojects`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(
            ":usecase:feature1:assemble",
        )
        runner.build()
            .output.let {
                assertContains(it, ":common:kotlin:compile")
            }
    }

    @Test
    fun `createSubproject tasks check inputs and outputs`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
            .tasks.forEach {
                assertEquals(TaskOutcome.UP_TO_DATE, it.outcome)
            }
    }

    @Test
    fun `plugin applies Android flavors to the screen layer`() {
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(
            ":screen:feature1:tasks",
        )
        runner.build()
            .output.let {
                assertContains(it, "assembleFeature1Mock")
                assertContains(it, "assembleFeature1Live")
            }
    }

    @Test
    fun `plugin links usecase to the screen layer`() {
        ResourceLoader.copyFileFromResources(
            "test/gradle.properties",
            getProjectDir().resolve("gradle.properties")
        )
        ResourceLoader.copyFileFromResources(
            "test/local.properties",
            getProjectDir().resolve("local.properties")
        )
        runner.withArguments(TASK_CREATE_ALL)
        runner.build()
        runner.withArguments(
            ":screen:feature1:assembleFeature1Mock",
        )
        runner.build()
            .output.let {
                assertContains(it, ":usecase:feature1:compile")
            }
    }

    @Test
    fun `plugin links screen layer to the app project`() {
        createAppProject()
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(
            ":app:assembleFeature1Mock",
        )
        runner.build()
            .output.let {
                assertContains(it, ":screen:feature1:compile")
            }
    }

    @Test
    fun `plugin applies Android flavors to the app layer`() {
        createAppProject()
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments(
            ":app:tasks",
        )
        runner.build()
            .output.let {
                assertContains(it, "assembleFeature1Mock")
                assertContains(it, "assembleFeature1Live")
            }
    }

    @Test
    fun `project evaluates successfully`() {
        createAppProject()
        runner.withArguments(TASK_CREATE_ALL)
            .withDebug(true)
            .withStacktrace()
            .build()
        runner.withArguments("tasks")
            .withStacktrace()
            .withDebug(true)
            .build()
    }

    @Test
    fun `plugin setups all unit tests task`() {
        createAppProject()
        runner.withArguments(TASK_CREATE_ALL)
        runner.build()
        runner.withArguments(TASK_ALL_UNIT_TESTS)
        runner.build()
            .output.let {
                assertContains(it, ":domain:test")
                assertContains(it, ":dto:test")
                assertContains(it, ":api:common:test")
                assertContains(it, ":api:common-live:test")
                assertContains(it, ":api:feature1:test")
                assertContains(it, ":common:kotlin:test")
                assertContains(it, ":repository:feature1:test")
                assertContains(it, ":api:feature1:live:test")
                assertContains(it, ":usecase:feature1:test")
                assertContains(it, ":api:feature1:mock:test")
                assertContains(it, ":common:android:testDebugUnitTest")
                assertContains(it, ":screen:feature1:testFeature1LiveDebugUnitTest")
            }
    }

    @Test
    fun `plugin creates debugMinify build type`() {
        createAppProject()
        runner.withArguments(TASK_CREATE_ALL)
            .build()
        runner.withArguments(":app:assembleDebugMinify")
            .withStacktrace()
            .build()
    }

    /**
     * Need to think it over first.
     */
    @Ignore
    @Test
    fun `plugin is able to detect external changes is settings file`() {
        createAppProject()
        runner.withArguments(TASK_CREATE_ALL)
        runner.withStacktrace()
        runner.withDebug(true)
        runner.build()
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
//        runner.withArguments(
//            ":app:tasks",
//        )
//        runner.build()
//            .tasks.let {
//            }
    }

    @Test
    fun `plugin creates subprojects for each feature`() {
        getBuildFile().appendText(
            """
            $EXTENSION_NAME {
                features.set(listOf("f1", "f2", "f3"))
            }
        """.trimIndent()
        )
        runner.withArguments(TASK_CREATE_ALL)
        runner.withDebug(true)
        runner.build()
        runner.withArguments("projects")
        runner.build()
            .output.let { output ->
                listOf(
                    "Project ':api:f1:live'",
                    "Project ':api:f1:mock'",
                    "Project ':api:f2:live'",
                    "Project ':api:f2:mock'",
                    "Project ':api:f3:live'",
                    "Project ':api:f3:mock'",
                    "Project ':screen:f1'",
                    "Project ':usecase:f1'",
                    "Project ':repository:f1'",
                    "Project ':screen:f2'",
                    "Project ':usecase:f2'",
                    "Project ':repository:f2'",
                    "Project ':screen:f3'",
                    "Project ':usecase:f3'",
                    "Project ':repository:f3'",
                ).forEach {
                    assertContains(output, it)
                }
            }
    }

    @Ignore
    @Test
    fun `plugin creates build gradle for api common thru init task`() {
        runner.withArguments("createSubprojectWithInitPluginApiCommon")
        runner.withDebug(true)
        runner.build()
        /**
         * Put a breakpoint here to get a chance to browse temporary project files.
         */
        println("test")
        runner.withArguments("projects")
        runner.build()
        runner.withArguments("api:common:tasks")
        runner.build()
        runner.withArguments("api:common:common:tasks")
        runner.build()
    }
}
